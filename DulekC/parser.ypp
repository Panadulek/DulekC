%{
#include <memory>
#include <iostream>
#include <string>
#include "AstTree.h"
#include "DuObject.h"
#include "Type.h"
#include "Variable.h"
#include "Value.h"
#include "TypeContainer.h"
#include <cstdint>
#include <vector>
std::vector<Type*> s_typeslist;
std::vector<Identifier> s_identifierslist;
 extern char* yytext;
 int __cdecl yylex(void);
void yyerror(const char *s) { std::cerr  << s << "  :   " << '"' << yytext << '"' << std::endl; }
%}
%code requires {

    #include "Type.h"
    #include "Variable.h"
    #include "DuObject.h"
    #include <memory>
    #include <string>
    #include <cstdint>
    // Inne wymagane nag³ówki
}
%union {
    char* str;  
    uint64_t num; 
    Variable* pvariable;
    Type* ptype;
    NumericValue* pnumvalue;
    ObjectInByte bytetype;
}

%token ARROW LBRACE RBRACE COMMA SEMICOLON LBUCKLE RBUCKLE INIT_TYPE
%token <bytetype> I8 U8 I16 U16 I32 U32 I64 U64
%token <str> IDENTIFIER
%token <num> NUMBER


%start program

%type<bytetype> byte_type
%type<bytetype> ubyte_type
%type<ptype> NUMERIC_TYPE
%type<pvariable>variable_declaration
%type<pnumvalue> variable_numeric_init
%%

program
    : /* pusty */
    | program statement
    ;

statement
    : statement
    | variable_declaration 
    ;





variable_declaration
    : 
    IDENTIFIER ARROW NUMERIC_TYPE INIT_TYPE variable_numeric_init SEMICOLON
    {
        Identifier id($1);
        $$ = new Variable(id, $3, $5, AstTree::instance().inGlobal());
        AstTree::instance().addObject($$);
        delete [] $1;
    }
    | IDENTIFIER ARROW NUMERIC_TYPE SEMICOLON
    {
        Identifier id($1);
        $$ = new Variable(id, $3, new NumericValue(), AstTree::instance().inGlobal());
        AstTree::instance().addObject($$);
        delete [] $1;
    }
    ;

    variable_numeric_init 
        :
        NUMBER
        {
            $$ = new NumericValue($1)
        }


    NUMERIC_TYPE
    : byte_type
    {
       Identifier id = SimpleNumericType::generateId($1, true) ;
       TypeContainer::instance().insert<SimpleNumericType>(id, id, $1, true);
      $$ = TypeContainer::instance().getType(id);
     
    }
    |
     ubyte_type
    {
        Identifier id = SimpleNumericType::generateId($1, true) ;
        TypeContainer::instance().insert<SimpleNumericType>(id, id, $1, false);
        $$ = TypeContainer::instance().getType(id);
    }
    ;

  byte_type:
  I8 
  {
   $$ = $1;
  }
  | 
  I16
  {
    $$ = $1;
  }
  |
  I32 
  {
    $$ = $1;
  }
  | 
  I64
  {
    $$ = $1;
  }

  ubyte_type:
  U8 
  {
    $$ = $1;
  }
  | 
  U16
  {
    $$ = $1;
  }
  |
  U32 
  {
    $$ = $1;
  }
  | 
  U64
  {
   $$ = $1;
  }
%%

